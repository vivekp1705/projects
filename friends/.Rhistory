#legend.title = element_text(size = 10),
axis.line = element_line(linewidth = 1),
axis.title = element_text(size = 9),
axis.text = element_text(size = 9),
legend.text = element_text(size = 8),
#legend.spacing = unit(2, 'cm'),
plot.title = element_text(size = 14, hjust = 0.5, face = 'bold', family = "Verdana"),
plot.subtitle = element_text(size = 12, hjust = 0.5, face = "italic", family = "Verdana"))+
scale_fill_manual(values = c("#0077B6", "#ADD8E6", "#82EEFD", "#87CEEB", "#90E0EF", "#0077B6"))
#-----episodes_per_Season-------------
episodes_per_season <- friends_df %>%
group_by(Season) %>%
summarise(Episode = n_distinct(Episode)) %>%
mutate(Season = factor(Season))
episodes_per_season$c<- rep('black', nrow(episodes_per_season))
episodes_per_season$c[episodes_per_season$Episode>24] <- "#82EEFD"
episodes_per_season$c[episodes_per_season$Episode<=24&episodes_per_season$Episode>=23] <- "#0077B6"
episodes_per_season$c[episodes_per_season$Episode<23] <- "#ADD8E6"
ggplot(data = episodes_per_season, aes(x = Season, y = Episode, fill = c)) +
geom_bar(stat = "identity") +
labs(title = "Episodes per Season",
x = "Seasons",
y = "Count of Episodes") +
geom_text(aes(label = Episode), vjust = -0.3, size = 3, col = "black") +
#scale_fill_viridis_d() +
coord_flip() +
scale_fill_identity() +
theme_classic() +
theme(panel.background = element_blank(),
axis.title.x = element_text(face="italic", margin = margin(8, 00, 8, 00)), #adjusting margins of x and y axis titles
axis.title.y = element_text(face="italic", margin = margin(0, 08, 0, 08)),
axis.text.x = element_text(hjust=0.9, angle = 45), #text aligned at an angle
axis.line = element_line(linewidth = 1),
axis.title = element_text(size = 9),
axis.text = element_text(size = 9),
legend.text = element_text(size = 8),
#legend.spacing = unit(2, 'cm'),
plot.title = element_text(size = 14, hjust = 0.5, face = 'bold', family = "Verdana"),
plot.subtitle = element_text(size = 8, hjust = 0.5, face = "italic", family = "Verdana"))
f1%>%
group_by(f1$Season,f1$Episode)%>%
count()
View(friends_df)
View(f1episode)
f1episode$colour[f1episode$n>600] <- 'firebrick1'
f1episode$colour[f1episode$n>=400&f1episode$n<=600] <- 'royalblue'
# Scripts per Episode
scripts_per_Season <- friends_df %>%
group_by(Episode) %>%
summarise(Script = n_distinct(Script))
f1 <- friends_df[,1:4]
f1episode <- f1%>%
group_by(f1$Season,f1$Episode)%>%
count()
f1episode <- cbind(Episode = 1:nrow(f1episode), f1episode)
# Here we can get the number of total lines in each episode which can show the time of each episode.
f1episode$colour <- rep('black', nrow(f1episode))
f1episode$colour[f1episode$n>600] <- 'firebrick1'
f1episode$colour[f1episode$n>=400&f1episode$n<=600] <- 'royalblue'
f1episode$colour[f1episode$n<400] <- 'forestgreen'
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Two types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="Season2,Episode12,count=1065",
x=75,
y=1000,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
f1episode <- cbind(Episode = 1:nrow(f1episode), f1episode)
# Scripts per Episode
scripts_per_Season <- friends_df %>%
group_by(Episode) %>%
summarise(Script = n_distinct(Script))
f1 <- friends_df[,1:4]
f1episode <- f1%>%
group_by(f1$Season,f1$Episode)%>%
count()
f1episode <- cbind(Episode = 1:nrow(f1episode), f1episode)
# Here we can get the number of total lines in each episode which can show the time of each episode.
f1episode$colour <- rep('black', nrow(f1episode))
f1episode$colour[f1episode$n>600] <- 'firebrick1'
f1episode$colour[f1episode$n>=400&f1episode$n<=600] <- 'royalblue'
f1episode$colour[f1episode$n<400] <- 'forestgreen'
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="Season 9, Episode 23,count=623",
x=200,
y=600,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="Season 9, Episode 23,count=623",
x=50,
y=600,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="Season 9, Episode 23,count=623",
x=50,
y=620,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="Season 9, Episode 23,count=623",
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label=paste0("S - 9 Ep - 23, Lines - 623", '<br>',
"S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label=paste0("S - 9 Ep - 23, Lines - 623", <br>,
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label=paste0("S - 9 Ep - 23, Lines - 623", '<br>',
"S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label=paste0("S - 9 Ep - 23, Lines - 623"), #, '<br>',
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
geom_label(
label="S - 10 Ep - 17, Lines - 610" ,
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="S - 9 Ep - 23, Lines - 623", #, '<br>',
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
geom_label(
label="S - 10 Ep - 17, Lines - 610" ,
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=450,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
ggplot(f1episode,aes(x=f1episode$Episode,y=f1episode$n))+
geom_point(color=f1episode$colour)+
labs(
title = "Three types of episodes",
#    subtitle = "Red is most lines included;Blue is the middle;Green are the mode",
x=" Episode",
y="Count of line of each script"
)+  geom_label(
label="S - 9 Ep - 23, Lines - 623", #, '<br>',
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=623,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
geom_label(
label="S - 10 Ep - 17, Lines - 610" ,
# "S - 10 Ep - 17, Lines - 610"),
x=50,
y=580,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_blank())
# Define the main characters
main_characters <- c("Rachel", "Monica", "Phoebe", "Ross", "Chandler", "Joey")
# Filter the data frame by the main characters
friends_filtered <- friends_df %>%
filter(Speaker %in% main_characters)
# Select the relevant columns
friends_selected <- friends_filtered %>%
select(Season, Episode, Speaker, Script)
# Group the data frame by season, episode, script, and speaker, and combine the lines for each speaker
friends_grouped <- friends_selected %>%
group_by(Season, Episode, Script, Speaker)
#Wordcloud
used_words_df <- friends_df %>%
unnest_tokens(word, Script, token = "ngrams", n = 3)
# Remove stop words
used_words_df <- used_words_df %>%
anti_join(stop_words)
word_freq <- used_words_df %>%
count(word, sort = TRUE) %>%
na.omit()
# Filter by frequency and select top 100
word_freq_top50 <- word_freq %>%
filter(n >= 5) %>%
slice_max(n = 50, order_by = n)
wordcloud(words = word_freq_top50$word, freq = word_freq_top50$n,
scale=c(4, 0.5), min.freq = 5, max.words=50, random.order = FALSE,
rot.per=0.35, colors=brewer.pal(8, "Dark2"))
#--------------------Stacked bar graph of number of lines spoken by character per season----------------
# Group the data by season and speaker, and count the number of lines
lines_by_speaker_season <- friends_df %>%
group_by(Speaker, Season) %>%
summarize(total_lines = n()) %>%
filter(Speaker != "Opening Credits") %>%
arrange(Season, desc(total_lines))
# Create a vector of main characters to use for the legend
main_characters <- c("Monica", "Joey", "Chandler", "Ross", "Rachel", "Phoebe")
# Filter the data to only include main characters
lines_by_main_character_season <- lines_by_speaker_season %>%
filter(Speaker %in% main_characters)
# Create a grouped bar chart
theme_set(theme_bw()) + theme(plot.width = 10)
plot <- ggplot(lines_by_main_character_season, aes(x = as.integer(Season), y = total_lines)) +
geom_line(aes(color = Speaker)) +
geom_point(aes(color = Speaker)) +
scale_x_continuous(breaks = 1:10) +
xlab("Season") +
ylab("Number of Lines") +
ggtitle("Number of Lines Spoken by Main Characters per Season") +
theme(plot.title = element_text(hjust = 0.5)) +
facet_wrap(~Speaker, ncol = 2)
plot + guides(color = FALSE)
#------- Filter data to only include lines spoken by Rachel-----
# Filter for lines spoken by Rachel
rachel_lines <- friends_df %>%
filter(Speaker == "Rachel") %>%
select(Script)
# Tokenize words and filter stop words
rachel_words <- rachel_lines %>%
unnest_tokens(word, Script) %>%
anti_join(stop_words)
# Count word frequency and select top 50
rachel_word_freq <- rachel_words %>%
count(word, sort = TRUE) %>%
slice_max(n = 50, order_by = n)
# Create wordcloud
wordcloud(words = rachel_word_freq$word, freq = rachel_word_freq$n,
scale=c(5,1), rot.per=0.35, min.freq=5,
random.color=TRUE, colors=brewer.pal(8, "Dark2"),
main = "Wordcloud of Rachel's most frequent words")
# Filter data to only include lines spoken by Joey
joey_lines <- friends_df %>%
filter(Speaker == "Joey") %>%
select(Script)
# Tokenize words and filter stop words
joey_words <- joey_lines %>%
unnest_tokens(word, Script) %>%
anti_join(stop_words)
# Count word frequency and select top 50
joey_word_freq <- joey_words %>%
count(word, sort = TRUE) %>%
slice_max(n = 50, order_by = n)
# Create wordcloud
wordcloud(words = joey_word_freq$word, freq = joey_word_freq$n,
scale=c(5,1), rot.per=0.35, min.freq=5,
random.color=TRUE, colors=brewer.pal(8, "Dark2"),
main = "Wordcloud of Joey's most frequent words")
# Filter data to only include lines spoken by Ross
ross_lines <- friends_df %>%
filter(Speaker == "Ross") %>%
select(Script)
# Tokenize words and filter stop words
ross_words <- ross_lines %>%
unnest_tokens(word, Script) %>%
anti_join(stop_words)
# Count word frequency and select top 50
ross_word_freq <- ross_words %>%
count(word, sort = TRUE) %>%
slice_max(n = 50, order_by = n)
# Create wordcloud
wordcloud(words = ross_word_freq$word, freq = ross_word_freq$n,
scale=c(5,1), rot.per=0.35, min.freq=5,
random.color=TRUE, colors=brewer.pal(8, "Dark2"),
main = "Wordcloud of Ross's most frequent words")
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
# Import Friends script data
friends_script <- friends_df
# Cleaning and preparing the data
friends_words <- friends_script %>%
unnest_tokens(word, Script) %>%
anti_join(stop_words) %>%
#mutate(word = wordStem(word)) %>%
filter(!str_detect(word, "^\\d+$")) %>%
mutate(word = str_replace_all(word, "[^[:alnum:]']", "")) %>%
filter(!word %in% c("", "s"))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word")
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word")
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(sentiment > -10, "humorous", "not humorous"))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
summarize(sentiment = sum(value))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(sentiment > -10, "humorous", "not humorous"))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > -10, "humorous", "not humorous"))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous"))
# Analyze sentiment and humor
friends_sentiment <- friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous"))
# Create a word cloud of humorous words
wordcloud(friends_words$word[friends_sentiment$humor == "humorous"],
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
friends_sentiment
# Analyze sentiment and humor
friends_sentiment <- friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous")) %>%
```
friends_sentiment
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous")) %>%
filter(humor == "humorous")
# Analyze sentiment and humor
friends_sentiment <- friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous")) %>%
filter(humor == "humorous")
# Create a word cloud of humorous words
wordcloud(friends_0entime0t$humor ,
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
# Create a word cloud of humorous words
wordcloud(friends_sentiment$humor ,
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
friends_words %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
#  summarize(sentiment = sum(value)) %>%
mutate(humor = ifelse(value > 3, "humorous", "not humorous")) %>%
filter(humor == "humorous")
# Create a word cloud of humorous words
wordcloud(friends_sentiment$word ,
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
friends_sentiment %>%
filter(Speaker == "Chandler") %>%
filter(humor == "humorous")
# Analyze sentiment and humor
chandler_sentiment <- friends_sentiment %>%
filter(Speaker == "Chandler") %>%
filter(humor == "humorous")
wordcloud(chandler_sentiment$word == "humorous",
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
wordcloud(chandler_sentiment$word,
max.words = 75, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
